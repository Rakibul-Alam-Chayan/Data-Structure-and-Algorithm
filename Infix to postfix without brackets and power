#include<stdio.h>

struct Node {
    char data;
    struct Node*next;
};

struct Node*top=NULL;

int isoperand(char x){

        if(x=='+' || x=='-' || x=='/' || x=='*'){
            return 0;
        }

        else{
            return 1;
        }
}

void push(char x){


    struct Node*new_node=(struct Node*)malloc(sizeof(struct Node));
    if(new_node==NULL){
        printf("Overflow\n\n");
    }
    else{
    new_node->data=x;
    new_node->next=top;
    top=new_node;
    }
}

char pop(){
    char ret=-1;
    struct Node*del;
    if(top==NULL){
        printf("there is no node\n\n");
        //return ret ;
    }

    else{
        //char ret;

        ret=top->data;
        del=top;
        top=top->next;
        free(del);

    }

    return ret;

}


int pre(char x){

        if(x=='+' || x=='-'){

            return 1;
        }
        else if(x=='*' || x=='/'){
            return 2;
        }
        else{
            return 0;
        }
}


char * infixTOpostfix(char *infix){

    int i=0;
    int j=0;
    char * postfix=(char *)malloc((strlen(infix)+1)*sizeof(char));
    while(infix[i]!=NULL){
        if(isoperand(infix[i])){
            postfix[j]=infix[i];
            i++;
            j++;
        }
        else{
            if(pre(infix[i])>pre(top->data)){
                push(infix[i]);
                i++;
            }
            else{
                postfix[j]=pop();
                j++;

            }
        }
    }
    while(top!=NULL){

        char data=pop();

        if(data=='I'){

            break;

            }

        else{
                postfix[j]=data;
                j++;

            }



    }
    postfix[j]=NULL;
    return postfix;

}

int main(void){
    char *infix="a+b-c+d";
    push('I');
    char *postfix=infixTOpostfix(infix);
    printf("%s", postfix);


}


